#!/usr/bin/env python

import os
from collections import defaultdict

optimizations = [
    'OPT_REV_RANKMAP_ITER',
    'OPT_ZERO_RANKMAP_INLINE',
    'OPT_PREALLOC_TO_DELETE',
    'OPT_PREALLOC_RANKMAP',
    'OPT_ARRAY_OVER_MAP_RANKMAP',
    'OPT_INLINE_EVERYTHING',
    'OPT_QUAD_MULTIPLIER',
]

def value(l):
    return sorted(l)[int(len(l)/2)]

g = defaultdict(lambda: dict())

open("/tmp/out", "w").close()

for i in range(0, 2**len(optimizations)):
    lines = ""
    for j in range(len(optimizations)):
        on = 0
        if (1 << j) & i > 0:
            on = 1
        lines += "#define {} {}\n".format(optimizations[j], on)
    
    lines += "#define OPT_DEC_KEY_RANK_DEC 0\n"

    with open("../src/optimizations.hpp", "w") as f:
        f.write(lines)
    
    vals = defaultdict(lambda: list())
    for x in range(5):
        os.system("make all_tests 2>&1 1>/dev/null && ./all_tests 50000 2>/dev/null 1>/tmp/x")
        with open("/tmp/x") as f:
            splits = f.read().strip().split(" ")
            for split in splits:
                name, val = split.split("=")
                if name == "n":
                    continue

                val = int(val)
                vals[name].append(val)

    line = ""
    line += "{} ".format(i)
    for name in vals:
        line += "{} ".format(value(vals[name]))
        g[i][name] = value(vals[name])

    print(line)
    with open("/tmp/out", "a") as f:
        f.write(line + "\n")
