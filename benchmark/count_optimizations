#!/usr/bin/env python

from collections import defaultdict

optimizations = [
    'OPT_REV_RANKMAP_ITER',
    'OPT_ZERO_RANKMAP_INLINE',
    'OPT_PREALLOC_TO_DELETE',
    'OPT_PREALLOC_RANKMAP',
    'OPT_ARRAY_OVER_MAP_RANKMAP',
    'OPT_INLINE_EVERYTHING',
    'OPT_QUAD_MULTIPLIER',
    # 'OPT_DEC_KEY_RANK_DEC_0',
    # 'OPT_DEC_KEY_RANK_DEC_1',
    # 'OPT_DEC_KEY_RANK_DEC_2',
    # 'OPT_DEC_KEY_RANK_DEC_3',
]

def split(line):
    res = {}
    _, res["sort"], res["assorted"], res["dijkstra"], res["prim"], res["compression"] = line.split()
    for key in res:
        res[key] = int(res[key])
    return res

with open("/tmp/out") as f:
    lines = [x[:-1] for x in f.readlines()]

    opt = defaultdict(lambda: defaultdict(lambda: []))

    for j in range(len(optimizations)):
        for i in range(len(lines)):
            if (1 << j) & i == 0:
                this = split(lines[i])
                other = split(lines[i ^ (1 << j)])
                for param in ["sort", "assorted", "dijkstra", "prim", "compression"]:
                    opt[optimizations[j]][param].append(this[param]/other[param])

    for o in opt:
        print(o + "\n" + "\n".join(["    {}\t\t{:+.2f}%".format(key, 100*(sum(val)/len(val) - 1)) for key, val in opt[o].items()]))
